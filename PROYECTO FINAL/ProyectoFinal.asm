;=====================
; EEPROM + 2 POTENCIOMETROS + LCD (PORTD y PORTE)
;=====================

    #INCLUDE "P16F887.INC"
    
    __CONFIG _CONFIG1, (_CP_OFF & _WDT_OFF & _PWRTE_ON & _XT_OSC & _LVP_OFF)
    __CONFIG _CONFIG2, _BOR21V

;===== REGISTROS =====
POT1L      EQU 0x20
POT1H      EQU 0x21
REG1      EQU 0x22
REG2     EQU 0x23  
REG3     EQU 0x24  
REG4     EQU 0x25
REG5      EQU 0X26
REGSL	  EQU 0X27
REGSH     EQU 0X28
REGC1 EQU 0X2A
REGD1 EQU 0X2B
REGU1 EQU 0X2C
REGC2 EQU 0X2D
REGD2 EQU 0X2E
REGU2 EQU 0X2F
REGM  EQU 0X30
REGC  EQU 0X31
REGD  EQU 0X32
REGU  EQU 0X33
POT2H EQU 0X34
POT2L EQU 0X35
REGM1 EQU 0X36
REGM2 EQU 0X37
REG6 EQU 0X38

;===== INICIO =====
    ORG 0x00
    GOTO INICIO

TABLA1
	ADDWF PCL,1
	RETLW '0'
	RETLW '1'
	RETLW '2'
	RETLW '3'
	RETLW '4' 
	RETLW '5'
	RETLW '6' 
	RETLW '7'
	RETLW '8'
	RETLW '9'
RETURN 

;=====================
; CONFIGURACIÓN LCD
;=====================
;=== CONFIGURACION LDC ===
LCD_INIT
	BCF PORTE,1;RS
	BCF PORTE,0;RW
COMANDO3
	MOVLW B'00000110'
	MOVWF PORTD
	CALL ENABLE
COMANDO2
	MOVLW B'00001100'
	MOVWF PORTD
	CALL ENABLE
COMANDO1
	MOVLW B'00111100'
	MOVWF PORTD
	CALL ENABLE
RETURN
COMANDO4 ;######CURSOR HOME#####
	BCF PORTE,0
	BCF PORTE,1
	MOVLW B'00000010'
	MOVWF PORTD
	CALL ENABLE
	RETURN
COMANDO5 ;####BORRADO DE PANTALLA
	BCF PORTE,0
	BCF PORTE,1
	MOVLW B'00000001'
	MOVWF PORTD
	CALL ENABLE
	RETURN	

ENABLE
	BSF PORTE,2
	CALL TIEMPO2
	BCF PORTE,2
	RETURN

TIEMPO2
	MOVLW .13
	MOVWF REG4
SIGO2
	MOVLW .255
	MOVWF REG5
	DECFSZ REG5
	GOTO $-.1
	DECFSZ REG4
	GOTO SIGO2

RETURN

;=====================
; CONFIGURACIÓN ADC
;=====================
SETUP_ADC
	BANKSEL ANSEL ;selecciono el banco 3
	CLRF ANSELH
	CLRF ANSEL    
	BSF ANSEL,0   ;limpio los analógicos, menos el RA0/AN0
	BSF ANSEL,1	  ;limpio los analógicos, menos el RA1/AN1

	BANKSEL TRISA
	CLRF TRISA
	BSF TRISA,0            ; RA0 entrada
	BSF TRISA,1            ; RA1 entrada
	CLRF TRISD    ; declaro como salida los pines del bus de datos 8 bits
	CLRF TRISE    ; declaro como salida los pines de control RW RS y E

	BANKSEL ADCON1
	MOVLW b'10000000'      ; Justificación derecha
	MOVWF ADCON1

	BANKSEL ADCON0
	MOVLW b'01000001'      ; Canal AN0 (por defecto), ADC ON
	MOVWF ADCON0
	CLRF PORTD      ;LIMPIO VALORES PARA EL MÓDULO LCD (BUS Y PINES CONTROL)
	CLRF PORTE
	RETURN

LEER_POT1
    BSF ADCON0,GO_DONE
ESPERA1
    BTFSC ADCON0,GO_DONE
    GOTO ESPERA1
    BANKSEL ADRESL
    MOVF ADRESL,W
    BANKSEL PORTC
    MOVWF POT1L
    BANKSEL ADRESH
    MOVF ADRESH,W
    BANKSEL PORTC
    MOVWF POT1H
	RETURN
	
LEER_POT2
    BSF ADCON0,GO_DONE
ESPERA2
    BTFSC ADCON0,GO_DONE
    GOTO ESPERA2
    BANKSEL ADRESL
    MOVF ADRESL,W
    BANKSEL PORTC
    MOVWF POT2L
    BANKSEL ADRESH
    MOVF ADRESH,W
    BANKSEL PORTC
    MOVWF POT2H
	RETURN


;=====================
; PROGRAMA PRINCIPAL
;=====================
INICIO
	BANKSEL TRISB
	BSF TRISB,2            ; Botón guardar
	CLRF TRISD
	CLRF TRISE

	BANKSEL PORTB
	CLRF PORTB
	CLRF PORTD
	CLRF PORTE

	CALL LCD_INIT
	CALL SETUP_ADC

PRINCIPAL
	; Leer POT 1 (AN1)
	BCF ADCON0,CHS0
	BCF ADCON0,CHS1
	BCF ADCON0,CHS2
	CALL DELAY_ADC
	CALL LEER_POT1

	; Leer POT 2 (AN2)
	BSF ADCON0,CHS0
	BCF ADCON0,CHS1
	BCF ADCON0,CHS2
	CALL DELAY_ADC
	CALL LEER_POT2

	; Mostrar valores
	CALL MOSTRAR_LCD

	; Si se presiona botón, guardar EEPROM
	BANKSEL PORTB
	BTFSS PORTB,2
	GOTO PRINCIPAL
	CALL GUARDAR_EEPROM
	GOTO PRINCIPAL

;=====================
; GUARDAR EEPROM
;=====================
GUARDAR_EEPROM
	NOP
	GOTO GUARDAR_EEPROM

ESCRIBIR
	BANKSEL EECON1
	BSF EECON1,WREN
	MOVLW 0x55
	MOVWF EECON2
	MOVLW 0xAA
	MOVWF EECON2
	BSF EECON1,WR
ESPERA_WR
	BTFSC EECON1,WR
	GOTO ESPERA_WR
	BCF EECON1,WREN
	RETURN

;=====================
; MOSTRAR EN LCD
;=====================
MOSTRAR_LCD
	BSF PORTE,0     ; RS=1 (datos)
	BCF PORTE,1     ; RW=0

	; --- Mostrar "B:" ---
	MOVLW 'B'
	MOVWF PORTD
	CALL ENABLE
	MOVLW ':'
	MOVWF PORTD
	CALL ENABLE

	; --- Descomponer VAL1 ---
	MOVF POT1L,W
	MOVWF REGSL
	MOVF POT1H,W
	MOVWF REGSH
	CALL DESCOMP
	CALL REVCAS
	CALL ARREGLO


	; Copiar resultados
	MOVF REGM,W
	MOVWF REGM1
	MOVF REGC,W
	MOVWF REGC1
	MOVF REGD,W
	MOVWF REGD1
	MOVF REGU,W
	MOVWF REGU1

	; --- Descomponer VAL2 ---
	MOVF POT2L,W
	MOVWF REGSL
	MOVF POT2H,W
	MOVWF REGSH
	CALL DESCOMP
	CALL REVCAS
	CALL ARREGLO


	; Copiar resultados
	MOVF REGM,W
	MOVWF REGM2
	MOVF REGC,W
	MOVWF REGC2
	MOVF REGD,W
	MOVWF REGD2
	MOVF REGU,W
	MOVWF REGU2

	; --- Mostrar VAL1 ---
	MOVF REGM1,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGC1,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGD1,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGU1,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	; Espacio
	MOVLW ' '
	MOVWF PORTD
	CALL ENABLE

	; --- Mostrar "A:" ---
	MOVLW 'A'
	MOVWF PORTD
	CALL ENABLE
	MOVLW ':'
	MOVWF PORTD
	CALL ENABLE

	; --- Mostrar VAL2 ---
	MOVF REGM2,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGC2,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGD2,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	MOVF REGU2,W
	CALL TABLA1
	MOVWF PORTD
	CALL ENABLE

	CALL LIMPIO

	RETURN

LIMPIO
	CALL TIEMPO
	LCD_CONFIG2
		BCF PORTE,1;RS
		BCF PORTE,0;RW
	COMANDOB
		MOVLW B'0000010';b'00000001' para borrar en vez de escribir
		MOVWF PORTD
		CALL ENABLE

RETURN

TIEMPO
	MOVLW .3
	MOVWF REG1
	MOVLW .26
	MOVWF REG2
	MOVLW .255
	MOVWF REG3
	DECFSZ REG3
	GOTO $-.1
	DECFSZ REG2
	GOTO $-.5
	DECFSZ REG1
	GOTO $-.8
	RETURN

DESCOMP
	CLRF REGC
	CLRF REGD
	CLRF REGU
	CLRF REGM

CENTENA	
	MOVLW .100
	SUBWF REGSL,F
	BTFSC STATUS,C
	GOTO $+.3
	ADDWF REGSL
	GOTO DECENA
	INCF REGC,F
	GOTO $-.6

DECENA
	MOVLW .10
	SUBWF REGSL,F
	BTFSC STATUS,C
	GOTO $+.3
	ADDWF REGSL
	GOTO UNIDAD
	INCF REGD,F
	GOTO $-.6

UNIDAD
	MOVLW .1
	SUBWF REGSL,F
	BTFSC STATUS,C
	GOTO $+.3
	ADDWF REGSL
	RETURN
	INCF REGU,F
	GOTO $-.6

REVCAS
	MOVLW .0
	XORWF REGSH,W ;PREGUNTO "REGSH == 0?"
	BTFSC STATUS,Z;EN CASO DE SER IGUALES ENTRA EN CAS0
	GOTO CAS0
	
	MOVLW .1
	XORWF REGSH,W
	BTFSC STATUS,Z
	GOTO CAS1

	MOVLW .2
	XORWF REGSH,W
	BTFSC STATUS,Z
	GOTO CAS2
	
	MOVLW .3
	XORWF REGSH,W
	BTFSC STATUS,Z
	GOTO CAS3
RETURN
		
;################# CASOS DE REGSH ##########	
;####  sumo las literales correspondientes en los Ru Rd Rc 
CAS0

	MOVLW .0
	ADDWF REGU,F

	MOVLW .0
	ADDWF REGD,F

	MOVLW .0
	ADDWF REGC,F

RETURN

CAS1
	MOVLW .6
	ADDWF REGU,F

	MOVLW .5
	ADDWF REGD,F

	MOVLW .2
	ADDWF REGC,F

RETURN

CAS2
	MOVLW .2
	ADDWF REGU,F

	MOVLW .1
	ADDWF REGD,F

	MOVLW .5
	ADDWF REGC,F

RETURN

CAS3
	MOVLW .8
	ADDWF REGU,F

	MOVLW .6
	ADDWF REGD,F

	MOVLW .7
	ADDWF REGC,F

RETURN 

;##################### REPARO VALORES < 9 #########
ARREGLO
	MOVLW .246 ;cargo el acumulador para carry si se le suma =< 10
	ADDWF REGU,W;sumo el contenido del registro al acumulador
	BTFSC STATUS,C;pregunto si ocurre acarreo, si ocurre, call correxu
	CALL CORREXU
	
	MOVLW .246
	ADDWF REGD,W
	BTFSC STATUS,C
	CALL CORREXD
	
	MOVLW .246
	ADDWF REGC,W
	BTFSC STATUS,C
	CALL CORREXC
	
RETURN
;###################### CORRECTORES
;## muevo 10 al acumulador y proximamente le resto la literal al registro registro
;## remplazo el valor del registro con el resultado de la resta 
;## Cargo la literal "1" al workfile y la sumo al registro siguiente
CORREXU
	MOVLW .10
	SUBWF REGU,F
	MOVLW .1
	ADDWF REGD,F
RETURN

CORREXD
	MOVLW .10
	SUBWF REGD,F
	MOVLW .1
	ADDWF REGC,F
RETURN

CORREXC
	MOVLW .10
	SUBWF REGC,F
	MOVLW .1
	ADDWF REGM,F ;Añade 1 al RegMillares
RETURN

DELAY_ADC
    MOVLW .25       ; 25 ciclos aprox = 25 µs a 4 MHz
    MOVWF REG6
ESPERA_ADC
    NOP
    DECFSZ REG6,F
    GOTO ESPERA_ADC
    RETURN

	END
